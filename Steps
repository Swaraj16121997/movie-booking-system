Primary objective to achieve in this project: Concurrency Handling
Hence, primary requirement to achieve in this project: User should be able to book the ticket and if more than one user
is trying to book the same seat for a show then only one user should be allowed to book

Solutions:
  - Way 1: Serializable Isolation Level (Transaction Isolation Level) -> acquiring lock from start till the end of the payment or till the timer finishes (in case user returns back from payment page)
  - Way 2: Double check locking. Threads check if seat is available then one of the threads takes lock over critical section in the race condition, then again that thread checks if the status changed
           or not (status might get changed due to some internal reason in the backend). If status has not changed, now thread will perform some actions and change the status to "Blocked" in the db
           itself and then release the lock here itself, as it has changed the primary check condition in this step itself in the db. Hence, this approach is faster than way 1.


About some basic springboot annotations:
  - @Getter, @Setter, @ToString, @EqualsAndHashCode, @NoArgsConstructor, @AllArgsConstructor, @Data, @RequiredArgsConstructor
  - @Enumerated(EnumType.ORDINAL) (String/Int), @ElementCollection (list of enum) - These annotations are used to map enum in the db
  - @Entity - is used to tell JPA to create the class as a table in the database.
  - @Id - is used to define the primary key.
  - @GeneratedValue(strategy = GenerationType.IDENTITY) - is used to define the primary key generation strategy.
  - @ManyToOne - is used to define the many-to-one relationship between two entities.
  - @Repository, @Service, @Controller are specializations of @Component for more specific use cases. These annotations are used
    to auto-detect and auto-configure beans using classpath scanning in spring framework.
  - @Transactional(isolation = Isolation.SERIALIZABLE) - This annotation is used to mark a method as transactional. The annotation can be placed before method name or before class name.
  - @SpringBootApplication is equivalent to using @Configuration, @EnableAutoConfiguration, and @ComponentScan.
  - @Autowired - It is basically used to inject the dependency of a bean in a class without having to create its object (using new keyword) in that class. The beans can be wired via constructor or properties or setter method.
  - @EnableJpaAuditing - This annotation is used to enable JPA Auditing. Used in springboot application class.
  - @EntityListeners(AuditingEntityListener.class) - This annotation is used to specify the listener class for auditing. Used generally in base model class.
  - @CreatedDate - This annotation is used to mark the field as the date on which the entity was created. Used generally in base model class.
  - @LastModifiedDate - This annotation is used to mark the field as the date on which the entity was last modified. Used generally in base model class.

Project Building steps:
  - create model classes, enums, interfaces, etc. in the `model` package
  - Do the cardinality Mapping for all the non-primitive attributes via annotations. Cardinality is not applicable for enums.
  - create database from mysql workbench and do the db connection setup in the project (db connection, properties file, etc.)
  - start completing the primary requirement by working on the ticket service
  - also implement the user service for sign-up and login functionality using BCryptPasswordEncoder